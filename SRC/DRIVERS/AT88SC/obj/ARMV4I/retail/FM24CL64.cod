; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\mini8510\SRC\DRIVERS\FM24CL64\FM24CL64.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?hGpio@@3PAXA| [ DATA ]		; hGpio
	EXPORT	|?hSPI@@3PAXA| [ DATA ]			; hSPI
	EXPORT	|?g_save_addr@@3GA| [ DATA ]		; g_save_addr

  00000			 AREA	 |.bss|, NOINIT
|?hGpio@@3PAXA| % 0x4					; hGpio
|?hSPI@@3PAXA| % 0x4					; hSPI
|?g_save_addr@@3GA| % 0x2				; g_save_addr
	EXPORT	|?Virtual_Alloc@@YAHXZ|			; Virtual_Alloc
	EXPORT	|??_C@_1IG@EHCJEPIJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAd?$AAd?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?5?$AAF?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@CPOLILHB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAd?$AAd?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?5?$AAF?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@JGCNFAIB@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SPIConfigure|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|SPIOpen|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOOpen|
; File c:\wince600\platform\mini8510\src\drivers\fm24cl64\fm24cl64.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36583| DCD	|$LN12@Virtual_Al|
	DCD	0x40002a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@EHCJEPIJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAd?$AAd?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?5?$AAF?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "P", 0x0, "d", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "H", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w"
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g"
	DCB	0x0, "u", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "S", 0x0, "P"
	DCB	0x0, "I", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@CPOLILHB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAd?$AAd?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?5?$AAF?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "P", 0x0, "d", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "H", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w"
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "S"
	DCB	0x0, "P", 0x0, "I", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@JGCNFAIB@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?$AA@| DCB "S", 0x0, "P", 0x0
	DCB	"I", 0x0, "2", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Virtual_Alloc@@YAHXZ| PROC		; Virtual_Alloc

; 20   : {

  00000		 |$LN12@Virtual_Al|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36580|

; 21   : 	unsigned char send[3]={0x00,0x00,0x67};
; 22   : 	unsigned char recv[2]={0x05,0x00};
; 23   : #ifndef USE_25115A
; 24   : 	m_hI2C = I2COpen(SOCGetI2CDeviceByBus(3)); //nmcca: using I2C3_MEMBASE make sense doesnt return a good value... so nothing is opened. Using hardcoded value 3 for now     
; 25   : 	I2CSetSlaveAddress(m_hI2C,  FM24CL64_I2C_DEVICE_ADDR); //nmcca: there is nothing to check to see if the handle is null...
; 26   : 	I2CSetSubAddressMode(m_hI2C, I2C_SUBADDRESS_MODE_0);  
; 27   : #else
; 28   : 	DWORD  config;
; 29   : 	hGpio = GPIOOpen();

  00004	eb000000	 bl          GPIOOpen
  00008	e59f4094	 ldr         r4, [pc, #0x94]
  0000c	e1a03000	 mov         r3, r0

; 30   : 	GPIOSetMode(hGpio, 162, GPIO_DIR_OUTPUT );

  00010	e3a02000	 mov         r2, #0
  00014	e3a010a2	 mov         r1, #0xA2
  00018	e5843004	 str         r3, [r4, #4]
  0001c	eb000000	 bl          GPIOSetMode

; 31   : 	GPIOSetMode(hGpio, 158, GPIO_DIR_OUTPUT );

  00020	e5940004	 ldr         r0, [r4, #4]
  00024	e3a02000	 mov         r2, #0
  00028	e3a0109e	 mov         r1, #0x9E
  0002c	eb000000	 bl          GPIOSetMode

; 32   : 	GPIOSetBit(hGpio, 162);

  00030	e5940004	 ldr         r0, [r4, #4]
  00034	e3a010a2	 mov         r1, #0xA2
  00038	eb000000	 bl          GPIOSetBit

; 33   : 	GPIOSetBit(hGpio, 158);

  0003c	e5940004	 ldr         r0, [r4, #4]
  00040	e3a0109e	 mov         r1, #0x9E
  00044	eb000000	 bl          GPIOSetBit

; 34   : 	hSPI = SPIOpen(L"SPI2:");

  00048	e59f0050	 ldr         r0, [pc, #0x50]
  0004c	eb000000	 bl          SPIOpen
  00050	e3500000	 cmp         r0, #0
  00054	e5840000	 str         r0, [r4]

; 35   : 	if (hSPI == NULL) 

  00058	1a000004	 bne         |$LN2@Virtual_Al|

; 36   : 	{
; 37   : 		RETAILMSG(1, (TEXT("ERROR: PddInitializeHardware: Failed open SPI device driver\r\n")));

  0005c	e59f0038	 ldr         r0, [pc, #0x38]
  00060		 |$LN9@Virtual_Al|
  00060	eb000000	 bl          NKDbgPrintfW

; 38   : 		return FALSE;

  00064	e3a00000	 mov         r0, #0

; 70   : }

  00068	e8bd4010	 ldmia       sp!, {r4, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN2@Virtual_Al|

; 38   : 		return FALSE;

  00070	e3a03801	 mov         r3, #1, 16

; 39   : 	}
; 40   : 	config =    MCSPI_PHA_ODD_EDGES |
; 41   : 		MCSPI_POL_ACTIVEHIGH |
; 42   : 		MCSPI_CHCONF_CLKD(11) |
; 43   : 		MCSPI_CSPOLARITY_ACTIVELOW |
; 44   : 		MCSPI_CHCONF_WL(8) |
; 45   : 		MCSPI_CHCONF_TRM_TXRX |
; 46   : 		MCSPI_CHCONF_DPE0;
; 47   : 	if (!SPIConfigure(hSPI, 0, config))

  00074	e3832ffb	 orr         r2, r3, #0xFB, 30
  00078	e3a01000	 mov         r1, #0
  0007c	eb000000	 bl          SPIConfigure
  00080	e3500000	 cmp         r0, #0

; 48   : 	{
; 49   : 		RETAILMSG(1, (TEXT("ERROR: PddInitializeHardware: Failed configure SPI device driver\r\n")));

  00084	059f000c	 ldreq       r0, [pc, #0xC]
  00088	0afffff4	 beq         |$LN9@Virtual_Al|

; 50   : 		return FALSE;
; 51   : 	}
; 52   : 	#if debug
; 53   : 	//RETAILMSG(1,(TEXT("Use 25115A chip\r\n")));
; 54   : 	SPILockController(hSPI,INFINITE);
; 55   : 	SPIEnableChannel(hSPI);
; 56   : 	SPIWriteRead(hSPI, sizeof(UINT8)*2, recv,send);
; 57   : 	SPIDisableChannel(hSPI);
; 58   : 	SPIUnlockController(hSPI);
; 59   : 	RETAILMSG(1,(TEXT("get mode %x \r\n"),send[1]));
; 60   : 	send[1]=0x00;
; 61   : 	WriteReg(send,3);
; 62   : 	Sleep(10);
; 63   : 	g_save_addr=0x0000;
; 64   : 	recv[0]=0xff;
; 65   : 	ReadReg((BYTE *)recv,1);
; 66   : 	RETAILMSG(1,(TEXT("get data %x \r\n"),recv[0]));
; 67   : 	#endif
; 68   : #endif
; 69   : 	return TRUE;

  0008c	e3a00001	 mov         r0, #1

; 70   : }

  00090	e8bd4010	 ldmia       sp!, {r4, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN13@Virtual_Al|
  00098		 |$LN14@Virtual_Al|
  00098	00000000	 DCD         |??_C@_1IG@EHCJEPIJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAd?$AAd?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?5?$AAF?$AAa@|
  0009c		 |$LN15@Virtual_Al|
  0009c	00000000	 DCD         |??_C@_1HM@CPOLILHB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAd?$AAd?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?5?$AAF?$AAa@|
  000a0		 |$LN16@Virtual_Al|
  000a0	00000000	 DCD         |??_C@_1M@JGCNFAIB@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?$AA@|
  000a4		 |$LN17@Virtual_Al|
  000a4	00000000	 DCD         |?hSPI@@3PAXA|
  000a8		 |$M36581|

			 ENDP  ; |?Virtual_Alloc@@YAHXZ|, Virtual_Alloc

	EXPORT	|?Virtual_Realease@@YAXXZ|		; Virtual_Realease

  00000			 AREA	 |.pdata|, PDATA
|$T36595| DCD	|$LN5@Virtual_Re|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Virtual_Realease@@YAXXZ| PROC	; Virtual_Realease

; 72   : {

  00000		 |$LN5@Virtual_Re|
  00000		 |$M36592|

; 73   : }

  00000	e12fff1e	 bx          lr
  00004		 |$M36593|

			 ENDP  ; |?Virtual_Realease@@YAXXZ|, Virtual_Realease

	EXPORT	|?DllEntry@@YAHPAXK0@Z|			; DllEntry

  00000			 AREA	 |.pdata|, PDATA
|$T36604| DCD	|$LN13@DllEntry|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DllEntry@@YAHPAXK0@Z| PROC		; DllEntry

; 80   : {

  00000		 |$LN13@DllEntry|
  00000		 |$M36601|

; 81   : 	switch(dwReason)

  00000	e3a00001	 mov         r0, #1

; 82   : 	{
; 83   : 		case DLL_PROCESS_ATTACH:
; 84   : 			DEBUGREGISTER((HINSTANCE)hinstDLL);
; 85   : 			return TRUE;
; 86   : 		case DLL_THREAD_ATTACH:
; 87   : 			break;
; 88   : 		case DLL_THREAD_DETACH:
; 89   : 			break;
; 90   : 		case DLL_PROCESS_DETACH:
; 91   : 			break;
; 92   : #ifdef UNDER_CE
; 93   : 		case DLL_PROCESS_EXITING:
; 94   : 			break;
; 95   : 		case DLL_SYSTEM_STARTED:
; 96   : 			break;
; 97   : #endif
; 98   : 	}
; 99   : 	return TRUE;
; 100  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36602|

			 ENDP  ; |?DllEntry@@YAHPAXK0@Z|, DllEntry

	EXPORT	|?FMC_Deinit@@YAHK@Z|			; FMC_Deinit

  00000			 AREA	 |.pdata|, PDATA
|$T36613| DCD	|$LN5@FMC_Deinit|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_Deinit@@YAHK@Z| PROC		; FMC_Deinit

; 103  : {

  00000		 |$LN5@FMC_Deinit|
  00000		 |$M36610|

; 104  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 105  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36611|

			 ENDP  ; |?FMC_Deinit@@YAHK@Z|, FMC_Deinit

	EXPORT	|?FMC_Init@@YAKK@Z|			; FMC_Init
	EXPORT	|??_C@_1CI@JAMJEBJI@?$AA?$FL?$AA?7?$AAS?$AAP?$AAI?$AA?5?$AAF?$AAM?$AA2?$AA4?$AAC?$AAL?$AA6?$AA4?$AA?$CL?$AA?$CL?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HCOKJEDP@?$AA?$FL?$AA?7?$AAS?$AAP?$AAI?$AA?5?$AAF?$AAM?$AA2?$AA4?$AAC?$AAL?$AA6?$AA4?$AA?9?$AA?9?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T36626| DCD	|$LN9@FMC_Init|
	DCD	0x40000b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JAMJEBJI@?$AA?$FL?$AA?7?$AAS?$AAP?$AAI?$AA?5?$AAF?$AAM?$AA2?$AA4?$AAC?$AAL?$AA6?$AA4?$AA?$CL?$AA?$CL?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB "["
	DCB	0x0, 0x9, 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " ", 0x0, "F"
	DCB	0x0, "M", 0x0, "2", 0x0, "4", 0x0, "C", 0x0, "L", 0x0, "6"
	DCB	0x0, "4", 0x0, "+", 0x0, "+", 0x0, "]", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HCOKJEDP@?$AA?$FL?$AA?7?$AAS?$AAP?$AAI?$AA?5?$AAF?$AAM?$AA2?$AA4?$AAC?$AAL?$AA6?$AA4?$AA?9?$AA?9?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB "["
	DCB	0x0, 0x9, 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " ", 0x0, "F"
	DCB	0x0, "M", 0x0, "2", 0x0, "4", 0x0, "C", 0x0, "L", 0x0, "6"
	DCB	0x0, "4", 0x0, "-", 0x0, "-", 0x0, "]", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_Init@@YAKK@Z| PROC		; FMC_Init

; 107  : {

  00000		 |$LN9@FMC_Init|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36623|

; 108  : 	RETAILMSG(1,(TEXT("[	SPI FM24CL64++]\r\n")));

  00004	e59f001c	 ldr         r0, [pc, #0x1C]
  00008	eb000000	 bl          NKDbgPrintfW

; 109  : 	Virtual_Alloc();

  0000c	eb000000	 bl          |?Virtual_Alloc@@YAHXZ|

; 110  : 	RETAILMSG(1,(TEXT("[	SPI FM24CL64--]\r\n")));

  00010	e59f000c	 ldr         r0, [pc, #0xC]
  00014	eb000000	 bl          NKDbgPrintfW

; 111  : 	return TRUE;

  00018	e3a00001	 mov         r0, #1

; 112  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN10@FMC_Init|
  00024		 |$LN11@FMC_Init|
  00024	00000000	 DCD         |??_C@_1CI@HCOKJEDP@?$AA?$FL?$AA?7?$AAS?$AAP?$AAI?$AA?5?$AAF?$AAM?$AA2?$AA4?$AAC?$AAL?$AA6?$AA4?$AA?9?$AA?9?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN12@FMC_Init|
  00028	00000000	 DCD         |??_C@_1CI@JAMJEBJI@?$AA?$FL?$AA?7?$AAS?$AAP?$AAI?$AA?5?$AAF?$AAM?$AA2?$AA4?$AAC?$AAL?$AA6?$AA4?$AA?$CL?$AA?$CL?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$M36624|

			 ENDP  ; |?FMC_Init@@YAKK@Z|, FMC_Init

	EXPORT	|?WriteReg@@YAHPAEE@Z|			; WriteReg
	IMPORT	|free|
	IMPORT	|SPIUnlockController|
	IMPORT	|SPIDisableChannel|
	IMPORT	|SPIWriteRead|
	IMPORT	|SPIEnableChannel|
	IMPORT	|SPILockController|
	IMPORT	|malloc|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T36643| DCD	|$LN6@WriteReg|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WriteReg@@YAHPAEE@Z| PROC		; WriteReg

; 114  : {

  00000		 |$LN6@WriteReg|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M36640|
  00004	e1a07001	 mov         r7, r1
  00008	e1a08000	 mov         r8, r0

; 115  : 	BOOL rc = FALSE;
; 116  : #ifndef USE_25115A
; 117  : 	if (m_hI2C)
; 118  : 	{
; 119  : 		DWORD len = I2CWrite(m_hI2C, 0, value, sizeof(UINT8)*size);
; 120  : 		if ( len != sizeof(UINT8)*size)
; 121  : 			ERRORMSG(ZONE_ERROR,(TEXT("Write FM24CL64 Failed!!\r\n")));
; 122  : 		else
; 123  : 			rc = TRUE;
; 124  : 	}
; 125  : 	
; 126  : 	return rc;
; 127  : #else
; 128  : 	if(hSPI)

  0000c	e59f6090	 ldr         r6, [pc, #0x90]
  00010	e5963000	 ldr         r3, [r6]
  00014	e3530000	 cmp         r3, #0
  00018	0a00001e	 beq         |$LN1@WriteReg|

; 129  : 	{
; 130  : 		int i;
; 131  : 		unsigned char *out_buffer=(unsigned char *)malloc(size+1);

  0001c	e2870001	 add         r0, r7, #1
  00020	eb000000	 bl          malloc
  00024	e1a05000	 mov         r5, r0

; 132  : 		unsigned char *in_buffer=(unsigned char *)malloc(size+1);

  00028	e2870001	 add         r0, r7, #1
  0002c	eb000000	 bl          malloc

; 133  : 		out_buffer[0]=0x2;

  00030	e3a02002	 mov         r2, #2

; 134  : 		memcpy(&(out_buffer[1]),value,size);

  00034	e1a03005	 mov         r3, r5
  00038	e4c32001	 strb        r2, [r3], #1
  0003c	e1a04000	 mov         r4, r0
  00040	e1a02007	 mov         r2, r7
  00044	e1a00003	 mov         r0, r3
  00048	e1a01008	 mov         r1, r8
  0004c	eb000000	 bl          memcpy

; 135  : 		#if debug
; 136  : 		RETAILMSG(1,(TEXT("\r\nWrite OUT>\r\n")));
; 137  : 		for(i=0;i<size+1;i++)
; 138  : 			RETAILMSG(1,(TEXT("%x "),out_buffer[i]));
; 139  : 		#endif
; 140  : 		SPILockController(hSPI,INFINITE);

  00050	e5960000	 ldr         r0, [r6]
  00054	e3e01000	 mvn         r1, #0
  00058	eb000000	 bl          SPILockController

; 141  : 		SPIEnableChannel(hSPI);

  0005c	e5960000	 ldr         r0, [r6]
  00060	eb000000	 bl          SPIEnableChannel

; 142  : 		SPIWriteRead(hSPI, sizeof(UINT8)*(size+1), out_buffer,in_buffer);

  00064	e5960000	 ldr         r0, [r6]
  00068	e1a03004	 mov         r3, r4
  0006c	e1a02005	 mov         r2, r5
  00070	e2871001	 add         r1, r7, #1
  00074	eb000000	 bl          SPIWriteRead

; 143  : 		SPIDisableChannel(hSPI);

  00078	e5960000	 ldr         r0, [r6]
  0007c	eb000000	 bl          SPIDisableChannel

; 144  : 		SPIUnlockController(hSPI);

  00080	e5960000	 ldr         r0, [r6]
  00084	eb000000	 bl          SPIUnlockController

; 145  : 		free(in_buffer);

  00088	e1a00004	 mov         r0, r4
  0008c	eb000000	 bl          free

; 146  : 		free(out_buffer);

  00090	e1a00005	 mov         r0, r5
  00094	eb000000	 bl          free
  00098		 |$LN1@WriteReg|

; 147  : 	}
; 148  : 	return TRUE;

  00098	e3a00001	 mov         r0, #1

; 149  : #endif
; 150  : 	}

  0009c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN7@WriteReg|
  000a4		 |$LN8@WriteReg|
  000a4	00000000	 DCD         |?hSPI@@3PAXA|
  000a8		 |$M36641|

			 ENDP  ; |?WriteReg@@YAHPAEE@Z|, WriteReg

	EXPORT	|?ReadReg@@YAHPAEE@Z|			; ReadReg
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T36659| DCD	|$LN6@ReadReg|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReadReg@@YAHPAEE@Z| PROC		; ReadReg

; 152  : {

  00000		 |$LN6@ReadReg|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M36656|
  00004	e1a07001	 mov         r7, r1
  00008	e1a08000	 mov         r8, r0

; 153  : #ifndef USE_25115A
; 154  : 	BOOL rc = FALSE;
; 155  : 	if (m_hI2C)
; 156  : 	{
; 157  : 		DWORD len = I2CRead(m_hI2C, 0,data, sizeof(UINT8)*size);
; 158  : 		if ( len != sizeof(UINT8)*size)
; 159  : 			ERRORMSG(ZONE_ERROR,(TEXT("Read FM24CL64 Failed!!\r\n")));
; 160  : 		else
; 161  : 			rc = TRUE;
; 162  : 	}
; 163  : 	return rc;
; 164  : #else
; 165  : 	if(hSPI)

  0000c	e59f60ac	 ldr         r6, [pc, #0xAC]
  00010	e5963000	 ldr         r3, [r6]
  00014	e3530000	 cmp         r3, #0
  00018	0a000025	 beq         |$LN1@ReadReg|

; 166  : 	{
; 167  : 		int i;
; 168  : 		unsigned char *out_buffer=(unsigned char *)malloc(size+3);

  0001c	e2870003	 add         r0, r7, #3
  00020	eb000000	 bl          malloc
  00024	e1a05000	 mov         r5, r0

; 169  : 		unsigned char *in_buffer=(unsigned char *)malloc(size+3);

  00028	e2870003	 add         r0, r7, #3
  0002c	eb000000	 bl          malloc
  00030	e1a04000	 mov         r4, r0

; 170  : 		memset(out_buffer,0,size+3);

  00034	e1a00005	 mov         r0, r5
  00038	e2872003	 add         r2, r7, #3
  0003c	e3a01000	 mov         r1, #0
  00040	eb000000	 bl          memset

; 171  : 		out_buffer[0]=0x3;

  00044	e3a03003	 mov         r3, #3
  00048	e5c53000	 strb        r3, [r5]

; 172  : 		out_buffer[1]=(g_save_addr)&0xff;

  0004c	e1d630b8	 ldrh        r3, [r6, #8]

; 173  : 		out_buffer[2]=(g_save_addr>>8)&0xff;
; 174  : 		#if debug
; 175  : 		RETAILMSG(1,(TEXT("\r\nRead OUT>\r\n")));
; 176  : 		for(i=0;i<3;i++)
; 177  : 			RETAILMSG(1,(TEXT("%x "),out_buffer[i]));
; 178  : 		#endif
; 179  : 		SPILockController(hSPI,INFINITE);

  00050	e3e01000	 mvn         r1, #0
  00054	e5c53001	 strb        r3, [r5, #1]
  00058	e5d63009	 ldrb        r3, [r6, #9]
  0005c	e5c53002	 strb        r3, [r5, #2]
  00060	e5960000	 ldr         r0, [r6]
  00064	eb000000	 bl          SPILockController

; 180  : 		SPIEnableChannel(hSPI);

  00068	e5960000	 ldr         r0, [r6]
  0006c	eb000000	 bl          SPIEnableChannel

; 181  : 		SPIWriteRead(hSPI, sizeof(UINT8)*(size+3), out_buffer,in_buffer);

  00070	e5960000	 ldr         r0, [r6]
  00074	e1a03004	 mov         r3, r4
  00078	e1a02005	 mov         r2, r5
  0007c	e2871003	 add         r1, r7, #3
  00080	eb000000	 bl          SPIWriteRead

; 182  : 		SPIDisableChannel(hSPI);

  00084	e5960000	 ldr         r0, [r6]
  00088	eb000000	 bl          SPIDisableChannel

; 183  : 		SPIUnlockController(hSPI);

  0008c	e5960000	 ldr         r0, [r6]
  00090	eb000000	 bl          SPIUnlockController

; 184  : 		#if debug
; 185  : 		RETAILMSG(1,(TEXT("\r\nIN<\r\n")));
; 186  : 		for(i=0;i<size+3;i++)
; 187  : 			RETAILMSG(1,(TEXT("%x "),in_buffer[i]));
; 188  : 		#endif
; 189  : 		memcpy(data,&(in_buffer[3]),size);

  00094	e1a02007	 mov         r2, r7
  00098	e2841003	 add         r1, r4, #3
  0009c	e1a00008	 mov         r0, r8
  000a0	eb000000	 bl          memcpy

; 190  : 		free(out_buffer);

  000a4	e1a00005	 mov         r0, r5
  000a8	eb000000	 bl          free

; 191  : 		free(in_buffer);

  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          free
  000b4		 |$LN1@ReadReg|

; 192  : 	}
; 193  : 	return TRUE;

  000b4	e3a00001	 mov         r0, #1

; 194  : #endif
; 195  : 	
; 196  : 
; 197  : }

  000b8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN7@ReadReg|
  000c0		 |$LN8@ReadReg|
  000c0	00000000	 DCD         |?hSPI@@3PAXA|
  000c4		 |$M36657|

			 ENDP  ; |?ReadReg@@YAHPAEE@Z|, ReadReg

	EXPORT	|?FMC_IOControl@@YAHKKPAEK0KPAK@Z|	; FMC_IOControl

  00000			 AREA	 |.pdata|, PDATA
|$T36675| DCD	|$LN14@FMC_IOCont|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; FMC_IOControl

; 207  : {	

  00000		 |$LN14@FMC_IOCont|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36672|
  00004	e3a03822	 mov         r3, #0x22, 16

; 208  : 	int i;
; 209  : 	switch(dwCode)

  00008	e3833ec6	 orr         r3, r3, #0xC6, 28
  0000c	e1510003	 cmp         r1, r3
  00010	0a00000f	 beq         |$LN7@FMC_IOCont|
  00014	e59f306c	 ldr         r3, [pc, #0x6C]
  00018	e1510003	 cmp         r1, r3
  0001c	1a000015	 bne         |$LN5@FMC_IOCont|

; 221  : 
; 222  : #endif
; 223  : 			#if debug
; 224  : 			RETAILMSG(1,(TEXT("\r\nWrite =\r\n")));
; 225  : 			for(i=0;i<dwLenOut;i++)
; 226  : 				RETAILMSG(1,(TEXT("%x "),*(BYTE*)(pBufOut+i)));
; 227  : 			#endif
; 228  : 			break;
; 229  : 		case IOCTL_FM24CL64_READ:
; 230  : 			if(pBufOut && dwLenOut>=sizeof(BYTE))

  00020	e59d0008	 ldr         r0, [sp, #8]
  00024	e3500000	 cmp         r0, #0
  00028	0a000012	 beq         |$LN5@FMC_IOCont|
  0002c	e59d400c	 ldr         r4, [sp, #0xC]
  00030	e3540001	 cmp         r4, #1
  00034	3a00000f	 bcc         |$LN5@FMC_IOCont|

; 231  : 			{
; 232  : 				#if debug
; 233  : 				RETAILMSG(1,(TEXT("\r\nRead =\r\n")));
; 234  : 				#endif
; 235  : 				ReadReg((BYTE*)pBufOut,dwLenOut);

  00038	e20410ff	 and         r1, r4, #0xFF
  0003c	eb000000	 bl          |?ReadReg@@YAHPAEE@Z|

; 236  : 				//RETAILMSG(1,(TEXT("Read %x="),*(BYTE*)pBufIn));
; 237  : 				#if debug
; 238  : 				for(i=0;i<dwLenOut;i++)
; 239  : 					RETAILMSG(1,(TEXT("%x "),*(BYTE*)(pBufOut+i)));
; 240  : 				#endif
; 241  : 				if(pdwActualOut) *(int*)pdwActualOut=sizeof(BYTE)*dwLenOut;

  00040	e59d3010	 ldr         r3, [sp, #0x10]
  00044	e3530000	 cmp         r3, #0
  00048	0a00000a	 beq         |$LN5@FMC_IOCont|
  0004c	e5834000	 str         r4, [r3]

; 242  : 			}
; 243  : 
; 244  : 			break;

  00050	ea000008	 b           |$LN5@FMC_IOCont|
  00054		 |$LN7@FMC_IOCont|

; 210  : 	{
; 211  : 		case IOCTL_FM24CL64_WRITE:
; 212  : 
; 213  : #ifndef USE_25115A
; 214  : 			WriteReg((BYTE *)pBufOut,dwLenOut);
; 215  : #else
; 216  : 			if(dwLenOut==2)

  00054	e59d300c	 ldr         r3, [sp, #0xC]
  00058	e3530002	 cmp         r3, #2

; 217  : 			{
; 218  : 				g_save_addr=*(UINT16 *)pBufOut;

  0005c	059d3008	 ldreq       r3, [sp, #8]
  00060	059f201c	 ldreq       r2, [pc, #0x1C]

; 219  : 			}else
; 220  : 				WriteReg((BYTE *)pBufOut,dwLenOut);

  00064	159d0008	 ldrne       r0, [sp, #8]
  00068	01d330b0	 ldreqh      r3, [r3]
  0006c	120310ff	 andne       r1, r3, #0xFF
  00070	01c230b0	 streqh      r3, [r2]
  00074	1b000000	 blne        |?WriteReg@@YAHPAEE@Z|
  00078		 |$LN5@FMC_IOCont|

; 245  : 		default:
; 246  : 			break;		
; 247  : 	}
; 248  : 	return TRUE;

  00078	e3a00001	 mov         r0, #1

; 249  : } 

  0007c	e8bd4010	 ldmia       sp!, {r4, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN15@FMC_IOCont|
  00084		 |$LN16@FMC_IOCont|
  00084	00000000	 DCD         |?g_save_addr@@3GA|
  00088		 |$LN17@FMC_IOCont|
  00088	00220c64	 DCD         0x220c64
  0008c		 |$M36673|

			 ENDP  ; |?FMC_IOControl@@YAHKKPAEK0KPAK@Z|, FMC_IOControl

	EXPORT	|?FMC_Open@@YAKKKK@Z|			; FMC_Open

  00000			 AREA	 |.pdata|, PDATA
|$T36687| DCD	|$LN5@FMC_Open|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_Open@@YAKKKK@Z| PROC		; FMC_Open

; 254  : {

  00000		 |$LN5@FMC_Open|
  00000		 |$M36684|

; 255  : 	//RETAILMSG(1,(TEXT("USERMUL: FMC_Open\r\n")));
; 256  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 257  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36685|

			 ENDP  ; |?FMC_Open@@YAKKKK@Z|, FMC_Open

	EXPORT	|?FMC_Close@@YAHK@Z|			; FMC_Close

  00000			 AREA	 |.pdata|, PDATA
|$T36696| DCD	|$LN5@FMC_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_Close@@YAHK@Z| PROC		; FMC_Close

; 262  : {

  00000		 |$LN5@FMC_Close|
  00000		 |$M36693|

; 263  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 264  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36694|

			 ENDP  ; |?FMC_Close@@YAHK@Z|, FMC_Close

	EXPORT	|?FMC_PowerDown@@YAXK@Z|		; FMC_PowerDown

  00000			 AREA	 |.pdata|, PDATA
|$T36703| DCD	|$LN5@FMC_PowerD|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_PowerDown@@YAXK@Z| PROC		; FMC_PowerDown

; 269  : {

  00000		 |$LN5@FMC_PowerD|
  00000		 |$M36700|

; 270  : 	//RETAILMSG(1,(TEXT("USERMUL: FMC_PowerDown\r\n")));
; 271  : 
; 272  : } 

  00000	e12fff1e	 bx          lr
  00004		 |$M36701|

			 ENDP  ; |?FMC_PowerDown@@YAXK@Z|, FMC_PowerDown

	EXPORT	|?FMC_PowerUp@@YAXK@Z|			; FMC_PowerUp

  00000			 AREA	 |.pdata|, PDATA
|$T36710| DCD	|$LN5@FMC_PowerU|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_PowerUp@@YAXK@Z| PROC		; FMC_PowerUp

; 277  : {

  00000		 |$LN5@FMC_PowerU|
  00000		 |$M36707|

; 278  : 	//RETAILMSG(1,(TEXT("USERMUL: FMC_PowerUp\r\n")));
; 279  : 
; 280  : } 

  00000	e12fff1e	 bx          lr
  00004		 |$M36708|

			 ENDP  ; |?FMC_PowerUp@@YAXK@Z|, FMC_PowerUp

	EXPORT	|?FMC_Read@@YAKKPAXK@Z|			; FMC_Read

  00000			 AREA	 |.pdata|, PDATA
|$T36719| DCD	|$LN5@FMC_Read|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_Read@@YAKKPAXK@Z| PROC		; FMC_Read

; 285  : {

  00000		 |$LN5@FMC_Read|
  00000		 |$M36716|

; 286  : 	//RETAILMSG(1,(TEXT("USERMUL: FMC_Read\r\n")));
; 287  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 288  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36717|

			 ENDP  ; |?FMC_Read@@YAKKPAXK@Z|, FMC_Read

	EXPORT	|?FMC_Seek@@YAKKJK@Z|			; FMC_Seek

  00000			 AREA	 |.pdata|, PDATA
|$T36728| DCD	|$LN5@FMC_Seek|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_Seek@@YAKKJK@Z| PROC		; FMC_Seek

; 293  : {

  00000		 |$LN5@FMC_Seek|
  00000		 |$M36725|

; 294  : 	//RETAILMSG(1,(TEXT("USERMUL: FMC_Seek\r\n")));
; 295  : 	return 0;

  00000	e3a00000	 mov         r0, #0

; 296  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36726|

			 ENDP  ; |?FMC_Seek@@YAKKJK@Z|, FMC_Seek

	EXPORT	|?FMC_Write@@YAKKPBXK@Z|		; FMC_Write

  00000			 AREA	 |.pdata|, PDATA
|$T36737| DCD	|$LN5@FMC_Write|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FMC_Write@@YAKKPBXK@Z| PROC		; FMC_Write

; 301  : {

  00000		 |$LN5@FMC_Write|
  00000		 |$M36734|

; 302  : 	//RETAILMSG(1,(TEXT("USERMUL: FMC_Write\r\n")));
; 303  : 	return 0;

  00000	e3a00000	 mov         r0, #0

; 304  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36735|

			 ENDP  ; |?FMC_Write@@YAKKPBXK@Z|, FMC_Write

	END
