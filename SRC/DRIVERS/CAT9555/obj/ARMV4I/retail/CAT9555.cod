; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\mini8510\SRC\DRIVERS\CAT9555\CAT9555.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_gpioH@@3PAXA| [ DATA ]		; g_gpioH
	EXPORT	|?GPIO_SCL@@3KA| [ DATA ]		; GPIO_SCL
	EXPORT	|?GPIO_SDA@@3KA| [ DATA ]		; GPIO_SDA
	EXPORT	|?port_0_status@@3EA| [ DATA ]		; port_0_status
	EXPORT	|?port_1_status@@3EA| [ DATA ]		; port_1_status
	EXPORT	|?write_port_0_status@@3EA| [ DATA ]	; write_port_0_status
	EXPORT	|?write_port_1_status@@3EA| [ DATA ]	; write_port_1_status

  00000			 AREA	 |.bss|, NOINIT
|?g_gpioH@@3PAXA| % 0x4					; g_gpioH

  00000			 AREA	 |.data|, DATA
|?GPIO_SCL@@3KA| DCD 0x85				; GPIO_SCL
|?GPIO_SDA@@3KA| DCD 0x86				; GPIO_SDA
|?port_0_status@@3EA| DCB 0xff				; port_0_status
|?port_1_status@@3EA| DCB 0xff				; port_1_status
|?write_port_0_status@@3EA| DCB 0xff			; write_port_0_status
|?write_port_1_status@@3EA| DCB 0xff			; write_port_1_status
	EXPORT	|?Dlyus@@YAXE@Z|			; Dlyus
; File c:\wince600\platform\mini8510\src\drivers\cat9555\cat9555.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36492| DCD	|$LN12@Dlyus|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Dlyus@@YAXE@Z| PROC			; Dlyus

; 26   : {

  00000		 |$LN12@Dlyus|
  00000	e24dd00c	 sub         sp, sp, #0xC
  00004		 |$M36489|

; 27   : 	volatile unsigned int i,j,k;
; 28   : 	k = 80*a;

  00004	e0803100	 add         r3, r0, r0, lsl #2
  00008	e1a03203	 mov         r3, r3, lsl #4

; 29   : 	for(i=0;i<k;i++) j=0;

  0000c	e3a01000	 mov         r1, #0
  00010	e58d3004	 str         r3, [sp, #4]
  00014	e58d1000	 str         r1, [sp]
  00018	ea000003	 b           |$LN9@Dlyus|
  0001c		 |$LL3@Dlyus|
  0001c	e58d1008	 str         r1, [sp, #8]
  00020	e59d3000	 ldr         r3, [sp]
  00024	e2833001	 add         r3, r3, #1
  00028	e58d3000	 str         r3, [sp]
  0002c		 |$LN9@Dlyus|
  0002c	e59d2000	 ldr         r2, [sp]
  00030	e59d3004	 ldr         r3, [sp, #4]
  00034	e1520003	 cmp         r2, r3
  00038	3afffff7	 bcc         |$LL3@Dlyus|

; 30   : 
; 31   : }

  0003c	e28dd00c	 add         sp, sp, #0xC
  00040	e12fff1e	 bx          lr
  00044		 |$M36490|

			 ENDP  ; |?Dlyus@@YAXE@Z|, Dlyus

	EXPORT	|?Start_I2c@@YAXXZ|			; Start_I2c
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOSetBit|

  00000			 AREA	 |.pdata|, PDATA
|$T36499| DCD	|$LN5@Start_I2c|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Start_I2c@@YAXXZ| PROC		; Start_I2c

; 40   : {

  00000		 |$LN5@Start_I2c|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36496|

; 41   :   SDA_H;         /*发送起始条件的数据信号*/

  00004	e59f4048	 ldr         r4, [pc, #0x48]
  00008	e59f5040	 ldr         r5, [pc, #0x40]
  0000c	e5941004	 ldr         r1, [r4, #4]
  00010	e5950000	 ldr         r0, [r5]
  00014	eb000000	 bl          GPIOSetBit

; 42   :   Dlyus(1);

  00018	e3a00001	 mov         r0, #1
  0001c	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 43   :   SCL_H; 

  00020	e5941000	 ldr         r1, [r4]
  00024	e5950000	 ldr         r0, [r5]
  00028	eb000000	 bl          GPIOSetBit

; 44   :   Dlyus(5);        /*起始条件建立时间大于4.7us,延时*/   

  0002c	e3a00005	 mov         r0, #5
  00030	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 45   :   SDA_L;          /*发送起始信号*/

  00034	e5941004	 ldr         r1, [r4, #4]
  00038	e5950000	 ldr         r0, [r5]
  0003c	eb000000	 bl          GPIOClrBit

; 46   :   Dlyus(5);        /* 起始条件锁定时间大于4μs*/

  00040	e3a00005	 mov         r0, #5
  00044	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 47   :   //SCL_L;       /*钳住I2C总线，准备发送或接收数据 */ 
; 48   : }

  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN6@Start_I2c|
  00050		 |$LN7@Start_I2c|
  00050	00000000	 DCD         |?g_gpioH@@3PAXA|
  00054		 |$LN8@Start_I2c|
  00054	00000000	 DCD         |?GPIO_SCL@@3KA|
  00058		 |$M36497|

			 ENDP  ; |?Start_I2c@@YAXXZ|, Start_I2c

	EXPORT	|?Stop_I2c@@YAXXZ|			; Stop_I2c

  00000			 AREA	 |.pdata|, PDATA
|$T36509| DCD	|$LN5@Stop_I2c|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stop_I2c@@YAXXZ| PROC		; Stop_I2c

; 56   : {

  00000		 |$LN5@Stop_I2c|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36506|

; 57   : 	SCL_L;

  00004	e59f405c	 ldr         r4, [pc, #0x5C]
  00008	e59f5054	 ldr         r5, [pc, #0x54]
  0000c	e5941000	 ldr         r1, [r4]
  00010	e5950000	 ldr         r0, [r5]
  00014	eb000000	 bl          GPIOClrBit

; 58   : 	Dlyus(5);      /*发送结束条件的时钟信号*/

  00018	e3a00005	 mov         r0, #5
  0001c	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 59   : 	SDA_L;      /*发送结束条件的数据信号*/	

  00020	e5941004	 ldr         r1, [r4, #4]
  00024	e5950000	 ldr         r0, [r5]
  00028	eb000000	 bl          GPIOClrBit

; 60   : 	Dlyus(5);

  0002c	e3a00005	 mov         r0, #5
  00030	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 61   :   SCL_H;      /*结束条件建立时间大于4μs*/

  00034	e5941000	 ldr         r1, [r4]
  00038	e5950000	 ldr         r0, [r5]
  0003c	eb000000	 bl          GPIOSetBit

; 62   :   Dlyus(5);

  00040	e3a00005	 mov         r0, #5
  00044	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 63   :   SDA_H;      /*发送I2C总线结束信号*/

  00048	e5941004	 ldr         r1, [r4, #4]
  0004c	e5950000	 ldr         r0, [r5]
  00050	eb000000	 bl          GPIOSetBit

; 64   :   Dlyus(6);

  00054	e3a00006	 mov         r0, #6
  00058	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 65   : }

  0005c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN6@Stop_I2c|
  00064		 |$LN7@Stop_I2c|
  00064	00000000	 DCD         |?g_gpioH@@3PAXA|
  00068		 |$LN8@Stop_I2c|
  00068	00000000	 DCD         |?GPIO_SCL@@3KA|
  0006c		 |$M36507|

			 ENDP  ; |?Stop_I2c@@YAXXZ|, Stop_I2c

	EXPORT	|?Err_Pro@@YAXXZ|			; Err_Pro
	IMPORT	|GPIOGetBit|
	IMPORT	|GPIOSetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T36524| DCD	|$LN14@Err_Pro|
	DCD	0x40003201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Err_Pro@@YAXXZ| PROC			; Err_Pro

; 73   : {

  00000		 |$LN14@Err_Pro|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36521|

; 74   : 	unsigned char i;
; 75   : 	
; 76   : 
; 77   : 		//结束总线
; 78   : 		//-----------------------------------------------------------------
; 79   : 		Stop_I2c();             

  00004	eb000000	 bl          |?Stop_I2c@@YAXXZ|

; 80   : 	  //-----------------------------------------------------------------
; 81   : 	
; 82   : 	
; 83   : 		//复位从机
; 84   : 		//-----------------------------------------------------------------
; 85   : 		GPIOSetMode(g_gpioH,GPIO_SDA,GPIO_DIR_INPUT);  

  00008	e59f50b4	 ldr         r5, [pc, #0xB4]
  0000c	e59f60ac	 ldr         r6, [pc, #0xAC]
  00010	e3a02001	 mov         r2, #1
  00014	e5951004	 ldr         r1, [r5, #4]
  00018	e5960000	 ldr         r0, [r6]
  0001c	eb000000	 bl          GPIOSetMode

; 86   : 		Dlyus(5);

  00020	e3a00005	 mov         r0, #5
  00024	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 87   : 		if(GPIOGetBit(g_gpioH,GPIO_SDA)==0){//检测SDA是否为低电平，是发送9个SCLK,进行复位

  00028	e5951004	 ldr         r1, [r5, #4]
  0002c	e5960000	 ldr         r0, [r6]
  00030	eb000000	 bl          GPIOGetBit
  00034	e3500000	 cmp         r0, #0
  00038	1a000013	 bne         |$LN11@Err_Pro|

; 88   : 		
; 89   : 					for(i=0;i<9;i++)  //发送9个CLK

  0003c	e3a04000	 mov         r4, #0
  00040		 |$LL4@Err_Pro|

; 90   : 					{
; 91   : 						Dlyus(6);

  00040	e3a00006	 mov         r0, #6
  00044	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 92   : 						SCL_L;        

  00048	e5951000	 ldr         r1, [r5]
  0004c	e5960000	 ldr         r0, [r6]
  00050	eb000000	 bl          GPIOClrBit

; 93   : 						Dlyus(5);        

  00054	e3a00005	 mov         r0, #5
  00058	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 94   : 						SCL_H; 

  0005c	e5951000	 ldr         r1, [r5]
  00060	e5960000	 ldr         r0, [r6]
  00064	eb000000	 bl          GPIOSetBit

; 95   : 						if(GPIOGetBit(g_gpioH,GPIO_SDA)==1)break;

  00068	e5951004	 ldr         r1, [r5, #4]
  0006c	e5960000	 ldr         r0, [r6]
  00070	eb000000	 bl          GPIOGetBit
  00074	e3500001	 cmp         r0, #1
  00078	0a000003	 beq         |$LN11@Err_Pro|
  0007c	e2843001	 add         r3, r4, #1
  00080	e20340ff	 and         r4, r3, #0xFF
  00084	e3540009	 cmp         r4, #9
  00088	3affffec	 bcc         |$LL4@Err_Pro|
  0008c		 |$LN11@Err_Pro|

; 96   : 					}
; 97   : 					
; 98   : 		}
; 99   : 		GPIOSetMode(g_gpioH,GPIO_SDA,GPIO_DIR_OUTPUT);  	

  0008c	e5951004	 ldr         r1, [r5, #4]
  00090	e5960000	 ldr         r0, [r6]
  00094	e3a02000	 mov         r2, #0
  00098	eb000000	 bl          GPIOSetMode

; 100  : 		Dlyus(5);

  0009c	e3a00005	 mov         r0, #5
  000a0	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 101  : 		SDA_H;      /*拉高SDA*/

  000a4	e5951004	 ldr         r1, [r5, #4]
  000a8	e5960000	 ldr         r0, [r6]
  000ac	eb000000	 bl          GPIOSetBit

; 102  : 		Dlyus(5);

  000b0	e3a00005	 mov         r0, #5
  000b4	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 103  : 		//-----------------------------------------------------------------
; 104  : 
; 105  : }

  000b8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN15@Err_Pro|
  000c0		 |$LN16@Err_Pro|
  000c0	00000000	 DCD         |?g_gpioH@@3PAXA|
  000c4		 |$LN17@Err_Pro|
  000c4	00000000	 DCD         |?GPIO_SCL@@3KA|
  000c8		 |$M36522|

			 ENDP  ; |?Err_Pro@@YAXXZ|, Err_Pro

	EXPORT	|?SendByte@@YADE@Z|			; SendByte

  00000			 AREA	 |.pdata|, PDATA
|$T36541| DCD	|$LN14@SendByte|
	DCD	0x40004a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SendByte@@YADE@Z| PROC		; SendByte

; 114  : {

  00000		 |$LN14@SendByte|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M36538|
  00004	e1a06000	 mov         r6, r0

; 115  :  unsigned char i,ack;
; 116  : 
; 117  :  for(i=0;i<8;i++)  /*要传送的数据长度为8位*/

  00008	e59f4114	 ldr         r4, [pc, #0x114]
  0000c	e59f510c	 ldr         r5, [pc, #0x10C]
  00010	e3a07000	 mov         r7, #0
  00014		 |$LL7@SendByte|

; 118  :     {
; 119  : 		 
; 120  : 		 SCL_L;

  00014	e5951000	 ldr         r1, [r5]
  00018	e5940000	 ldr         r0, [r4]
  0001c	eb000000	 bl          GPIOClrBit

; 121  : 		 Dlyus(3);

  00020	e3a00003	 mov         r0, #3
  00024	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 122  :      if(Wb&0x80)SDA_H;    /*判断发送位*/

  00028	e5951004	 ldr         r1, [r5, #4]
  0002c	e5940000	 ldr         r0, [r4]
  00030	e3160080	 tst         r6, #0x80
  00034	0a000001	 beq         |$LN4@SendByte|
  00038	eb000000	 bl          GPIOSetBit
  0003c	ea000000	 b           |$LN3@SendByte|
  00040		 |$LN4@SendByte|

; 123  :      else  SDA_L;           

  00040	eb000000	 bl          GPIOClrBit
  00044		 |$LN3@SendByte|

; 124  :      Wb = Wb<<1;	

  00044	e1a03086	 mov         r3, r6, lsl #1

; 125  : 		 Dlyus(3);

  00048	e3a00003	 mov         r0, #3
  0004c	e20360ff	 and         r6, r3, #0xFF
  00050	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 126  :      SCL_H;              /*置时钟线为高，通知被控器开始接收数据位*/

  00054	e5951000	 ldr         r1, [r5]
  00058	e5940000	 ldr         r0, [r4]
  0005c	eb000000	 bl          GPIOSetBit

; 127  :      Dlyus(5);             /*保证时钟高电平周期大于4μs*/

  00060	e3a00005	 mov         r0, #5
  00064	eb000000	 bl          |?Dlyus@@YAXE@Z|
  00068	e2873001	 add         r3, r7, #1
  0006c	e20370ff	 and         r7, r3, #0xFF
  00070	e3570008	 cmp         r7, #8
  00074	3affffe6	 bcc         |$LL7@SendByte|

; 128  :               
; 129  :     }
; 130  : 		
; 131  : 		SCL_L;

  00078	e5951000	 ldr         r1, [r5]
  0007c	e5940000	 ldr         r0, [r4]
  00080	eb000000	 bl          GPIOClrBit

; 132  : 		Dlyus(3);

  00084	e3a00003	 mov         r0, #3
  00088	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 133  :     SDA_L;                /*8位发送完后释放数据线，准备接收应答位*/

  0008c	e5951004	 ldr         r1, [r5, #4]
  00090	e5940000	 ldr         r0, [r4]
  00094	eb000000	 bl          GPIOClrBit

; 134  :     Dlyus(3);

  00098	e3a00003	 mov         r0, #3
  0009c	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 135  :     SCL_H; 

  000a0	e5951000	 ldr         r1, [r5]
  000a4	e5940000	 ldr         r0, [r4]
  000a8	eb000000	 bl          GPIOSetBit

; 136  : 		Dlyus(1);

  000ac	e3a00001	 mov         r0, #1
  000b0	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 137  : 		GPIOSetMode(g_gpioH,GPIO_SDA,GPIO_DIR_INPUT);  

  000b4	e5951004	 ldr         r1, [r5, #4]
  000b8	e5940000	 ldr         r0, [r4]
  000bc	e3a02001	 mov         r2, #1
  000c0	eb000000	 bl          GPIOSetMode

; 138  : 		Dlyus(5);

  000c4	e3a00005	 mov         r0, #5
  000c8	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 139  : 	if(GPIOGetBit(g_gpioH,GPIO_SDA)==1) 

  000cc	e5951004	 ldr         r1, [r5, #4]
  000d0	e5940000	 ldr         r0, [r4]
  000d4	eb000000	 bl          GPIOGetBit

; 140  : 		ack=0;     
; 141  :   else 
; 142  : 	  ack=1;        /*判断是否接收到应答信号*/
; 143  :     		
; 144  :   SCL_L; 

  000d8	e5951000	 ldr         r1, [r5]
  000dc	e3500001	 cmp         r0, #1
  000e0	e5940000	 ldr         r0, [r4]
  000e4	03a06000	 moveq       r6, #0
  000e8	13a06001	 movne       r6, #1
  000ec	eb000000	 bl          GPIOClrBit

; 145  :   Dlyus(3);

  000f0	e3a00003	 mov         r0, #3
  000f4	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 146  : 	GPIOSetMode(g_gpioH,GPIO_SDA,GPIO_DIR_OUTPUT);  

  000f8	e5951004	 ldr         r1, [r5, #4]
  000fc	e5940000	 ldr         r0, [r4]
  00100	e3a02000	 mov         r2, #0
  00104	eb000000	 bl          GPIOSetMode

; 147  : 	Dlyus(3);

  00108	e3a00003	 mov         r0, #3
  0010c	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 148  : 	return ack;

  00110	e1a00c06	 mov         r0, r6, lsl #24
  00114	e1a00c40	 mov         r0, r0, asr #24

; 149  : 	//if(ack==1)
; 150  : 	//	RETAILMSG(1,(TEXT("Get Ack\r\n")));
; 151  : }

  00118	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN15@SendByte|
  00120		 |$LN16@SendByte|
  00120	00000000	 DCD         |?GPIO_SCL@@3KA|
  00124		 |$LN17@SendByte|
  00124	00000000	 DCD         |?g_gpioH@@3PAXA|
  00128		 |$M36539|

			 ENDP  ; |?SendByte@@YADE@Z|, SendByte

	EXPORT	|?RcvByte@@YAEXZ|			; RcvByte

  00000			 AREA	 |.pdata|, PDATA
|$T36557| DCD	|$LN11@RcvByte|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RcvByte@@YAEXZ| PROC			; RcvByte

; 160  : {

  00000		 |$LN11@RcvByte|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M36554|

; 161  :   unsigned char  retc;
; 162  :   unsigned char  BitCnt;
; 163  :   int i,j;
; 164  :   retc=0; 
; 165  :   //GPIOSetBit(g_gpioH,GPIO_SDA);                   /*置数据线为输入方式*/
; 166  :   GPIOSetMode(g_gpioH,GPIO_SDA,GPIO_DIR_INPUT);  

  00004	e59f60b4	 ldr         r6, [pc, #0xB4]
  00008	e59f70ac	 ldr         r7, [pc, #0xAC]
  0000c	e3a02001	 mov         r2, #1
  00010	e5961004	 ldr         r1, [r6, #4]
  00014	e5970000	 ldr         r0, [r7]
  00018	e3a05000	 mov         r5, #0
  0001c	eb000000	 bl          GPIOSetMode

; 167  :   for(BitCnt=0;BitCnt<8;BitCnt++)

  00020	e3a04000	 mov         r4, #0
  00024		 |$LL4@RcvByte|

; 168  :       {
; 169  :         Dlyus(2);

  00024	e3a00002	 mov         r0, #2
  00028	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 170  :         SCL_L;                   /*置时钟线为低，准备接收数据位*/ 

  0002c	e5961000	 ldr         r1, [r6]
  00030	e5970000	 ldr         r0, [r7]
  00034	eb000000	 bl          GPIOClrBit

; 171  :         Dlyus(6);                /*时钟低电平周期大于4.7μs*/

  00038	e3a00006	 mov         r0, #6
  0003c	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 172  :         SCL_H;                   /*置时钟线为高使数据线上数据有效*/

  00040	e5961000	 ldr         r1, [r6]
  00044	e5970000	 ldr         r0, [r7]
  00048	eb000000	 bl          GPIOSetBit

; 173  :         Dlyus(2);

  0004c	e3a00002	 mov         r0, #2
  00050	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 174  : 				
; 175  :         retc=retc<<1;
; 176  :         if(GPIOGetBit(g_gpioH,GPIO_SDA)==1)

  00054	e5961004	 ldr         r1, [r6, #4]
  00058	e5970000	 ldr         r0, [r7]
  0005c	e1a03085	 mov         r3, r5, lsl #1
  00060	e20350ff	 and         r5, r3, #0xFF
  00064	eb000000	 bl          GPIOGetBit
  00068	e3500001	 cmp         r0, #1

; 177  : 				{
; 178  : 				retc=retc+1;  /*读数据位,接收的数据位放入retc中 */

  0006c	02853001	 addeq       r3, r5, #1

; 179  : 				//RETAILMSG(1,(TEXT("Get 1\r\n")));
; 180  :       	}
; 181  :         Dlyus(3);

  00070	e3a00003	 mov         r0, #3
  00074	020350ff	 andeq       r5, r3, #0xFF
  00078	eb000000	 bl          |?Dlyus@@YAXE@Z|
  0007c	e2843001	 add         r3, r4, #1
  00080	e20340ff	 and         r4, r3, #0xFF
  00084	e3540008	 cmp         r4, #8
  00088	3affffe5	 bcc         |$LL4@RcvByte|

; 182  :       }
; 183  :   SCL_L;       

  0008c	e5961000	 ldr         r1, [r6]
  00090	e5970000	 ldr         r0, [r7]
  00094	eb000000	 bl          GPIOClrBit

; 184  :   Dlyus(6);

  00098	e3a00006	 mov         r0, #6
  0009c	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 185  :   GPIOSetMode(g_gpioH,GPIO_SDA,GPIO_DIR_OUTPUT);  

  000a0	e5961004	 ldr         r1, [r6, #4]
  000a4	e5970000	 ldr         r0, [r7]
  000a8	e3a02000	 mov         r2, #0
  000ac	eb000000	 bl          GPIOSetMode

; 186  :   return(retc);
; 187  : }

  000b0	e1a00005	 mov         r0, r5
  000b4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN12@RcvByte|
  000bc		 |$LN13@RcvByte|
  000bc	00000000	 DCD         |?g_gpioH@@3PAXA|
  000c0		 |$LN14@RcvByte|
  000c0	00000000	 DCD         |?GPIO_SCL@@3KA|
  000c4		 |$M36555|

			 ENDP  ; |?RcvByte@@YAEXZ|, RcvByte

	EXPORT	|?Ack_I2c@@YAXH@Z|			; Ack_I2c

  00000			 AREA	 |.pdata|, PDATA
|$T36568| DCD	|$LN7@Ack_I2c|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ack_I2c@@YAXH@Z| PROC		; Ack_I2c

; 195  : {

  00000		 |$LN7@Ack_I2c|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36565|
  00004	e3500000	 cmp         r0, #0

; 196  :   int i,j;
; 197  :   if(a==0)SDA_L;                   /*在此发出应答或非应答信号 */

  00008	e59f4054	 ldr         r4, [pc, #0x54]
  0000c	e59f504c	 ldr         r5, [pc, #0x4C]
  00010	e5941004	 ldr         r1, [r4, #4]
  00014	e5950000	 ldr         r0, [r5]
  00018	1a000001	 bne         |$LN2@Ack_I2c|
  0001c	eb000000	 bl          GPIOClrBit
  00020	ea000000	 b           |$LN1@Ack_I2c|
  00024		 |$LN2@Ack_I2c|

; 198  :   else SDA_H;       

  00024	eb000000	 bl          GPIOSetBit
  00028		 |$LN1@Ack_I2c|

; 199  :   Dlyus(3);    

  00028	e3a00003	 mov         r0, #3
  0002c	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 200  :   SCL_H;       

  00030	e5941000	 ldr         r1, [r4]
  00034	e5950000	 ldr         r0, [r5]
  00038	eb000000	 bl          GPIOSetBit

; 201  :   Dlyus(5);                    /*时钟低电平周期大于4μs*/

  0003c	e3a00005	 mov         r0, #5
  00040	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 202  :   SCL_L;                         /*清时钟线，钳住I2C总线以便继续接收*/

  00044	e5941000	 ldr         r1, [r4]
  00048	e5950000	 ldr         r0, [r5]
  0004c	eb000000	 bl          GPIOClrBit

; 203  :   Dlyus(6);   

  00050	e3a00006	 mov         r0, #6
  00054	eb000000	 bl          |?Dlyus@@YAXE@Z|

; 204  : }

  00058	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN8@Ack_I2c|
  00060		 |$LN9@Ack_I2c|
  00060	00000000	 DCD         |?g_gpioH@@3PAXA|
  00064		 |$LN10@Ack_I2c|
  00064	00000000	 DCD         |?GPIO_SCL@@3KA|
  00068		 |$M36566|

			 ENDP  ; |?Ack_I2c@@YAXH@Z|, Ack_I2c

	EXPORT	|?ISendByte@@YAHEE@Z|			; ISendByte

  00000			 AREA	 |.pdata|, PDATA
|$T36583| DCD	|$LN8@ISendByte|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ISendByte@@YAHEE@Z| PROC		; ISendByte

; 206  : {

  00000		 |$LN8@ISendByte|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36580|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 207  :    unsigned char ack;
; 208  :    Start_I2c();              //启动总线

  0000c	eb000000	 bl          |?Start_I2c@@YAXXZ|

; 209  : 	
; 210  :    ack = SendByte(sla);            //发送器件地址

  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          |?SendByte@@YADE@Z|
  00018	e3500000	 cmp         r0, #0

; 211  :    if(ack==0){

  0001c	1a000003	 bne         |$LN2@ISendByte|
  00020		 |$LN5@ISendByte|

; 212  : 		 Err_Pro();

  00020	eb000000	 bl          |?Err_Pro@@YAXXZ|

; 213  : 		 return(0);

  00024	e3a00000	 mov         r0, #0

; 227  : }

  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$LN2@ISendByte|

; 214  : 	 }
; 215  :    //read_proc=TRUE;
; 216  :    //RETAILMSG(1,(TEXT("ISendByte 1\r\n")));
; 217  :    ack = SendByte(c);              //发送数据

  00030	e1a00005	 mov         r0, r5
  00034	eb000000	 bl          |?SendByte@@YADE@Z|
  00038	e3500000	 cmp         r0, #0

; 218  :    if(ack==0){
; 219  : 		 Err_Pro();
; 220  : 		 return(0);

  0003c	0afffff7	 beq         |$LN5@ISendByte|

; 221  : 	 }
; 222  :    //read_proc=FALSE;
; 223  :    //   RETAILMSG(1,(TEXT("ISendByte 2\r\n")));
; 224  : 
; 225  :    Stop_I2c();               //结束总线

  00040	eb000000	 bl          |?Stop_I2c@@YAXXZ|

; 226  :    return(1);

  00044	e3a00001	 mov         r0, #1

; 227  : }

  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M36581|

			 ENDP  ; |?ISendByte@@YAHEE@Z|, ISendByte

	EXPORT	|?IRcvByte@@YAEE@Z|			; IRcvByte

  00000			 AREA	 |.pdata|, PDATA
|$T36594| DCD	|$LN6@IRcvByte|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IRcvByte@@YAEE@Z| PROC		; IRcvByte

; 229  : {  unsigned char c,ack;

  00000		 |$LN6@IRcvByte|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36591|
  00004	e1a04000	 mov         r4, r0

; 230  : 
; 231  :    Start_I2c();          //启动总线

  00008	eb000000	 bl          |?Start_I2c@@YAXXZ|

; 232  :   // read_proc=TRUE;
; 233  :    ack = SendByte(sla+1);      //发送器件地址

  0000c	e2843001	 add         r3, r4, #1
  00010	e20300ff	 and         r0, r3, #0xFF
  00014	eb000000	 bl          |?SendByte@@YADE@Z|
  00018	e3500000	 cmp         r0, #0

; 234  :    if(ack==0){

  0001c	1a000002	 bne         |$LN1@IRcvByte|

; 235  : 		 Err_Pro();

  00020	eb000000	 bl          |?Err_Pro@@YAXXZ|

; 236  : 		 return(0);

  00024	e3a04000	 mov         r4, #0
  00028	ea000004	 b           |$LN2@IRcvByte|
  0002c		 |$LN1@IRcvByte|

; 237  : 	 }
; 238  :   // read_proc=FALSE;
; 239  :   //  RETAILMSG(1,(TEXT("IRcvByte 1\r\n")));
; 240  : 
; 241  :    c=RcvByte();          //读取数据0

  0002c	eb000000	 bl          |?RcvByte@@YAEXZ|
  00030	e1a04000	 mov         r4, r0

; 242  : 
; 243  :    Ack_I2c(1);           //发送非就答位

  00034	e3a00001	 mov         r0, #1
  00038	eb000000	 bl          |?Ack_I2c@@YAXH@Z|

; 244  :    Stop_I2c();           //结束总线

  0003c	eb000000	 bl          |?Stop_I2c@@YAXXZ|

; 245  :    //RETAILMSG(1,(TEXT("Read==> %x\r\n"),c));
; 246  :    return(c);

  00040		 |$LN2@IRcvByte|

; 247  : }

  00040	e1a00004	 mov         r0, r4
  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M36592|

			 ENDP  ; |?IRcvByte@@YAEE@Z|, IRcvByte

	EXPORT	|?PortConfig@@YAHEEE@Z|			; PortConfig

  00000			 AREA	 |.pdata|, PDATA
|$T36607| DCD	|$LN9@PortConfig|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PortConfig@@YAHEEE@Z| PROC		; PortConfig

; 249  : {

  00000		 |$LN9@PortConfig|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36604|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 250  : 	unsigned char ack;
; 251  : 		
; 252  :    Start_I2c();              //启动总

  00010	eb000000	 bl          |?Start_I2c@@YAXXZ|

; 253  : 	
; 254  :    ack = SendByte(sla);            //发送器件地址

  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          |?SendByte@@YADE@Z|
  0001c	e3500000	 cmp         r0, #0

; 255  :    if(ack==0){

  00020	1a000003	 bne         |$LN3@PortConfig|
  00024		 |$LN6@PortConfig|

; 256  : 		 Err_Pro();

  00024	eb000000	 bl          |?Err_Pro@@YAXXZ|

; 257  : 		 return(0);

  00028	e3a00000	 mov         r0, #0

; 272  : }

  0002c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN3@PortConfig|

; 258  : 	 }
; 259  :    ack = SendByte(c);              //发送控制字节

  00034	e1a00006	 mov         r0, r6
  00038	eb000000	 bl          |?SendByte@@YADE@Z|
  0003c	e3500000	 cmp         r0, #0

; 260  :    if(ack==0){
; 261  : 		 Err_Pro();
; 262  : 		 return(0);

  00040	0afffff7	 beq         |$LN6@PortConfig|

; 263  : 	 }
; 264  :    ack = SendByte(Val);            //发送DAC的数值  

  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          |?SendByte@@YADE@Z|
  0004c	e3500000	 cmp         r0, #0

; 265  : 
; 266  :    if(ack==0){
; 267  : 		 Err_Pro();
; 268  : 		 return(0);

  00050	0afffff3	 beq         |$LN6@PortConfig|

; 269  : 	 }
; 270  :    Stop_I2c();               //结束总线

  00054	eb000000	 bl          |?Stop_I2c@@YAXXZ|

; 271  :    return(1);

  00058	e3a00001	 mov         r0, #1

; 272  : }

  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M36605|

			 ENDP  ; |?PortConfig@@YAHEEE@Z|, PortConfig

	EXPORT	|?PortWrite@@YAHEEE@Z|			; PortWrite

  00000			 AREA	 |.pdata|, PDATA
|$T36620| DCD	|$LN9@PortWrite|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PortWrite@@YAHEEE@Z| PROC		; PortWrite

; 274  : {

  00000		 |$LN9@PortWrite|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36617|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 275  : 	unsigned char ack;
; 276  : 		
; 277  :    Start_I2c();              //启动总

  00010	eb000000	 bl          |?Start_I2c@@YAXXZ|

; 278  : 	
; 279  :    ack = SendByte(sla);            //发送器件地址

  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          |?SendByte@@YADE@Z|
  0001c	e3500000	 cmp         r0, #0

; 280  :    if(ack==0){

  00020	1a000003	 bne         |$LN3@PortWrite|
  00024		 |$LN6@PortWrite|

; 281  : 		 Err_Pro();

  00024	eb000000	 bl          |?Err_Pro@@YAXXZ|

; 282  : 		 return(0);

  00028	e3a00000	 mov         r0, #0

; 297  : }

  0002c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN3@PortWrite|

; 283  : 	 }
; 284  :    ack = SendByte(c);              //发送控制字节

  00034	e1a00006	 mov         r0, r6
  00038	eb000000	 bl          |?SendByte@@YADE@Z|
  0003c	e3500000	 cmp         r0, #0

; 285  :    if(ack==0){
; 286  : 		 Err_Pro();
; 287  : 		 return(0);

  00040	0afffff7	 beq         |$LN6@PortWrite|

; 288  : 	 }
; 289  :    ack = SendByte(Val);            //发送DAC的数值  

  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          |?SendByte@@YADE@Z|
  0004c	e3500000	 cmp         r0, #0

; 290  : 
; 291  :    if(ack==0){
; 292  : 		 Err_Pro();
; 293  : 		 return(0);

  00050	0afffff3	 beq         |$LN6@PortWrite|

; 294  : 	 }
; 295  :    Stop_I2c();               //结束总线

  00054	eb000000	 bl          |?Stop_I2c@@YAXXZ|

; 296  :    return(1);

  00058	e3a00001	 mov         r0, #1

; 297  : }

  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M36618|

			 ENDP  ; |?PortWrite@@YAHEEE@Z|, PortWrite

	EXPORT	|?PortRead@@YAEEE@Z|			; PortRead

  00000			 AREA	 |.pdata|, PDATA
|$T36632| DCD	|$LN8@PortRead|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PortRead@@YAEEE@Z| PROC		; PortRead

; 299  : {

  00000		 |$LN8@PortRead|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36629|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 300  : 	unsigned char ack;
; 301  : 		
; 302  :    Start_I2c();              //启动总

  0000c	eb000000	 bl          |?Start_I2c@@YAXXZ|

; 303  : 	
; 304  :    ack = SendByte(sla);            //发送器件地址

  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          |?SendByte@@YADE@Z|
  00018	e3500000	 cmp         r0, #0

; 305  :    if(ack==0){

  0001c	1a000003	 bne         |$LN2@PortRead|
  00020		 |$LN5@PortRead|

; 306  : 		 Err_Pro();

  00020	eb000000	 bl          |?Err_Pro@@YAXXZ|

; 307  : 		 return(0);

  00024	e3a00000	 mov         r0, #0

; 322  : }

  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$LN2@PortRead|

; 308  : 	 }
; 309  :    ack = SendByte(c);              //发送控制字节

  00030	e1a00005	 mov         r0, r5
  00034	eb000000	 bl          |?SendByte@@YADE@Z|
  00038	e3500000	 cmp         r0, #0

; 310  :    if(ack==0){
; 311  : 		 Err_Pro();
; 312  : 		 return(0);

  0003c	0afffff7	 beq         |$LN5@PortRead|

; 313  : 	 }
; 314  :    //ack = SendByte(Val);            //发送DAC的数值  
; 315  : 
; 316  :    //if(ack==0){
; 317  : 	//	 Err_Pro();
; 318  : 	//	 return(0);
; 319  : 	// }
; 320  :    //Stop_I2c();               //结束总线
; 321  :    return IRcvByte(sla);

  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          |?IRcvByte@@YAEE@Z|

; 322  : }

  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M36630|

			 ENDP  ; |?PortRead@@YAEEE@Z|, PortRead

	EXPORT	|?Virtual_Alloc@@YAHXZ|			; Virtual_Alloc
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T36641| DCD	|$LN5@Virtual_Al|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Virtual_Alloc@@YAHXZ| PROC		; Virtual_Alloc

; 325  : {

  00000		 |$LN5@Virtual_Al|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36638|

; 326  : #ifdef USE_IIC_BUS
; 327  : 	m_hI2C = I2COpen(SOCGetI2CDeviceByBus(1)); //nmcca: using I2C3_MEMBASE make sense doesnt return a good value... so nothing is opened. Using hardcoded value 3 for now     
; 328  : 	I2CSetSlaveAddress(m_hI2C,  CAT9555_I2C_DEVICE_ADDR); //nmcca: there is nothing to check to see if the handle is null...
; 329  : 	I2CSetSubAddressMode(m_hI2C, I2C_SUBADDRESS_MODE_8);    
; 330  : #else
; 331  : 	g_gpioH = GPIOOpen();

  00004	eb000000	 bl          GPIOOpen

; 332  : 	GPIOSetMode(g_gpioH,GPIO_SCL,GPIO_DIR_OUTPUT);

  00008	e59f404c	 ldr         r4, [pc, #0x4C]
  0000c	e59f5044	 ldr         r5, [pc, #0x44]
  00010	e1a03000	 mov         r3, r0
  00014	e5941000	 ldr         r1, [r4]
  00018	e3a02000	 mov         r2, #0
  0001c	e5853000	 str         r3, [r5]
  00020	eb000000	 bl          GPIOSetMode

; 333  : 	GPIOSetBit(g_gpioH,GPIO_SCL);

  00024	e5941000	 ldr         r1, [r4]
  00028	e5950000	 ldr         r0, [r5]
  0002c	eb000000	 bl          GPIOSetBit

; 334  : 	GPIOSetMode(g_gpioH,GPIO_SDA,GPIO_DIR_OUTPUT);    	 

  00030	e5941004	 ldr         r1, [r4, #4]
  00034	e5950000	 ldr         r0, [r5]
  00038	e3a02000	 mov         r2, #0
  0003c	eb000000	 bl          GPIOSetMode

; 335  : 	GPIOSetBit(g_gpioH,GPIO_SDA);

  00040	e5941004	 ldr         r1, [r4, #4]
  00044	e5950000	 ldr         r0, [r5]
  00048	eb000000	 bl          GPIOSetBit

; 336  : 	//while(1);
; 337  : #endif
; 338  :     return TRUE;

  0004c	e3a00001	 mov         r0, #1

; 339  : }

  00050	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN6@Virtual_Al|
  00058		 |$LN7@Virtual_Al|
  00058	00000000	 DCD         |?g_gpioH@@3PAXA|
  0005c		 |$LN8@Virtual_Al|
  0005c	00000000	 DCD         |?GPIO_SCL@@3KA|
  00060		 |$M36639|

			 ENDP  ; |?Virtual_Alloc@@YAHXZ|, Virtual_Alloc

	EXPORT	|?Virtual_Realease@@YAXXZ|		; Virtual_Realease

  00000			 AREA	 |.pdata|, PDATA
|$T36651| DCD	|$LN5@Virtual_Re|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Virtual_Realease@@YAXXZ| PROC	; Virtual_Realease

; 341  : {

  00000		 |$LN5@Virtual_Re|
  00000		 |$M36648|

; 342  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M36649|

			 ENDP  ; |?Virtual_Realease@@YAXXZ|, Virtual_Realease

	EXPORT	|?DllEntry@@YAHPAXK0@Z|			; DllEntry

  00000			 AREA	 |.pdata|, PDATA
|$T36660| DCD	|$LN13@DllEntry|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DllEntry@@YAHPAXK0@Z| PROC		; DllEntry

; 349  : {

  00000		 |$LN13@DllEntry|
  00000		 |$M36657|

; 350  : 	switch(dwReason)

  00000	e3a00001	 mov         r0, #1

; 351  : 	{
; 352  : 	case DLL_PROCESS_ATTACH:
; 353  : 		DEBUGREGISTER((HINSTANCE)hinstDLL);
; 354  : 		return TRUE;
; 355  : 	case DLL_THREAD_ATTACH:
; 356  : 		break;
; 357  : 	case DLL_THREAD_DETACH:
; 358  : 		break;
; 359  : 	case DLL_PROCESS_DETACH:
; 360  : 		break;
; 361  : #ifdef UNDER_CE
; 362  : 	case DLL_PROCESS_EXITING:
; 363  : 		break;
; 364  : 	case DLL_SYSTEM_STARTED:
; 365  : 		break;
; 366  : #endif
; 367  : 	}
; 368  : 	return TRUE;
; 369  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36658|

			 ENDP  ; |?DllEntry@@YAHPAXK0@Z|, DllEntry

	EXPORT	|?CAT_Deinit@@YAHK@Z|			; CAT_Deinit

  00000			 AREA	 |.pdata|, PDATA
|$T36669| DCD	|$LN5@CAT_Deinit|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_Deinit@@YAHK@Z| PROC		; CAT_Deinit

; 372  : {

  00000		 |$LN5@CAT_Deinit|
  00000		 |$M36666|

; 373  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 374  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36667|

			 ENDP  ; |?CAT_Deinit@@YAHK@Z|, CAT_Deinit

	EXPORT	|?CAT_Init@@YAKK@Z|			; CAT_Init
	EXPORT	|??_C@_1BO@LLMEHJGH@?$AA?$FL?$AA?7?$AAC?$AAA?$AAT?$AA9?$AA5?$AA5?$AA5?$AA?$CL?$AA?$CL?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@FJOHKMMA@?$AA?$FL?$AA?7?$AAC?$AAA?$AAT?$AA9?$AA5?$AA5?$AA5?$AA?9?$AA?9?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T36682| DCD	|$LN9@CAT_Init|
	DCD	0x40001301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LLMEHJGH@?$AA?$FL?$AA?7?$AAC?$AAA?$AAT?$AA9?$AA5?$AA5?$AA5?$AA?$CL?$AA?$CL?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB "["
	DCB	0x0, 0x9, 0x0, "C", 0x0, "A", 0x0, "T", 0x0, "9", 0x0, "5"
	DCB	0x0, "5", 0x0, "5", 0x0, "+", 0x0, "+", 0x0, "]", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FJOHKMMA@?$AA?$FL?$AA?7?$AAC?$AAA?$AAT?$AA9?$AA5?$AA5?$AA5?$AA?9?$AA?9?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB "["
	DCB	0x0, 0x9, 0x0, "C", 0x0, "A", 0x0, "T", 0x0, "9", 0x0, "5"
	DCB	0x0, "5", 0x0, "5", 0x0, "-", 0x0, "-", 0x0, "]", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_Init@@YAKK@Z| PROC		; CAT_Init

; 376  : {

  00000		 |$LN9@CAT_Init|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36679|

; 377  : 	RETAILMSG(1,(TEXT("[	CAT9555++]\r\n")));

  00004	e59f003c	 ldr         r0, [pc, #0x3C]
  00008	eb000000	 bl          NKDbgPrintfW

; 378  : 	Virtual_Alloc();

  0000c	eb000000	 bl          |?Virtual_Alloc@@YAHXZ|

; 379  : 	PortConfig(0x40,CONFIG_PORT_0,0xff);

  00010	e3a020ff	 mov         r2, #0xFF
  00014	e3a01006	 mov         r1, #6
  00018	e3a00040	 mov         r0, #0x40
  0001c	eb000000	 bl          |?PortConfig@@YAHEEE@Z|

; 380  : 	PortConfig(0x40,CONFIG_PORT_1,0xff);

  00020	e3a020ff	 mov         r2, #0xFF
  00024	e3a01007	 mov         r1, #7
  00028	e3a00040	 mov         r0, #0x40
  0002c	eb000000	 bl          |?PortConfig@@YAHEEE@Z|

; 381  : 	RETAILMSG(1,(TEXT("[	CAT9555--]\r\n")));

  00030	e59f000c	 ldr         r0, [pc, #0xC]
  00034	eb000000	 bl          NKDbgPrintfW

; 382  : 	return TRUE;

  00038	e3a00001	 mov         r0, #1

; 383  : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN10@CAT_Init|
  00044		 |$LN11@CAT_Init|
  00044	00000000	 DCD         |??_C@_1BO@FJOHKMMA@?$AA?$FL?$AA?7?$AAC?$AAA?$AAT?$AA9?$AA5?$AA5?$AA5?$AA?9?$AA?9?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  00048		 |$LN12@CAT_Init|
  00048	00000000	 DCD         |??_C@_1BO@LLMEHJGH@?$AA?$FL?$AA?7?$AAC?$AAA?$AAT?$AA9?$AA5?$AA5?$AA5?$AA?$CL?$AA?$CL?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  0004c		 |$M36680|

			 ENDP  ; |?CAT_Init@@YAKK@Z|, CAT_Init

	EXPORT	|?CAT_IOControl@@YAHKKPAEK0KPAK@Z|	; CAT_IOControl

  00000			 AREA	 |.pdata|, PDATA
|$T36705| DCD	|$LN38@CAT_IOCont|
	DCD	0x40008701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; CAT_IOControl

; 433  : {	

  00000		 |$LN38@CAT_IOCont|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36702|
  00004	e1a05002	 mov         r5, r2
  00008	e3a03822	 mov         r3, #0x22, 16

; 434  : 	int i;
; 435  : 	switch(dwCode)

  0000c	e3833d32	 orr         r3, r3, #0x32, 26
  00010	e1510003	 cmp         r1, r3
  00014	0a000039	 beq         |$LN25@CAT_IOCont|
  00018	e59f31f8	 ldr         r3, [pc, #0x1F8]
  0001c	e1510003	 cmp         r1, r3
  00020	1a000078	 bne         |$LN13@CAT_IOCont|

; 491  : 					//RETAILMSG(1,(TEXT("Write Port %x Level L\r\n"),*(BYTE *)pBufIn));
; 492  : 				}
; 493  : 			}
; 494  : 
; 495  : 		}
; 496  : 		break;
; 497  : 	case IOCTL_CAT9555_READ:
; 498  : 		if(pBufOut && dwLenOut>=sizeof(BYTE))

  00024	e59d4010	 ldr         r4, [sp, #0x10]
  00028	e3540000	 cmp         r4, #0
  0002c	0a000075	 beq         |$LN13@CAT_IOCont|
  00030	e59d6014	 ldr         r6, [sp, #0x14]
  00034	e3560001	 cmp         r6, #1
  00038	3a000072	 bcc         |$LN13@CAT_IOCont|

; 499  : 		{
; 500  : 			//USHORT outValue;
; 501  : 			//GPIOClrBit(g_gpioH,GPIO_DIR);
; 502  : 			//*(USHORT*)pBufOut = IOREAD(*(BYTE*)pBufIn);
; 503  : 			//RETAILMSG(0,(TEXT("Read =\r\n")));
; 504  : 			//ReadReg(*(UINT8 *)pBufIn,(BYTE*)pBufOut,dwLenOut);
; 505  : 			//RETAILMSG(1,(TEXT("Read %x="),*(BYTE*)pBufIn));
; 506  : 			//for(i=0;i<dwLenOut;i++)
; 507  : 			//RETAILMSG(0,(TEXT("%x\r\n"),*(BYTE*)(pBufOut+i)));
; 508  : 			
; 509  : 			if(*(UINT8 *)pBufIn<=7 && *(UINT8 *)pBufIn>=0)

  0003c	e5d53000	 ldrb        r3, [r5]

; 510  : 			{
; 511  : 				if(!(port_0_status&(1<<*(UINT8 *)pBufIn)))

  00040	e59fe1cc	 ldr         lr, [pc, #0x1CC]
  00044	e3530007	 cmp         r3, #7
  00048	8a000013	 bhi         |$LN10@CAT_IOCont|
  0004c	e3a02001	 mov         r2, #1
  00050	e1a03312	 mov         r3, r2, lsl r3
  00054	e5de2000	 ldrb        r2, [lr]
  00058	e1120003	 tst         r2, r3

; 512  : 				{
; 513  : 					port_0_status |= (1<<*(UINT8 *)pBufIn);

  0005c	01823003	 orreq       r3, r2, r3
  00060	020330ff	 andeq       r3, r3, #0xFF

; 514  : 					PortConfig(0x40,CONFIG_PORT_0,port_0_status);

  00064	01a02003	 moveq       r2, r3
  00068	03a01006	 moveq       r1, #6
  0006c	03a00040	 moveq       r0, #0x40
  00070	05ce3000	 streqb      r3, [lr]
  00074	0b000000	 bleq        |?PortConfig@@YAHEEE@Z|

; 515  : 					//RETAILMSG(1,(TEXT("Config Port %x Input\r\n"),*(BYTE *)pBufIn));
; 516  : 				}
; 517  : 				if(!(PortRead(0x40,INPUT_PORT_0)&(1<<*(UINT8 *)pBufIn)))

  00078	e3a01000	 mov         r1, #0
  0007c	e3a00040	 mov         r0, #0x40
  00080	eb000000	 bl          |?PortRead@@YAEEE@Z|
  00084	e5d53000	 ldrb        r3, [r5]
  00088		 |$LN35@CAT_IOCont|
  00088	e3a02001	 mov         r2, #1
  0008c	e1100312	 tst         r0, r2, lsl r3
  00090	1a000013	 bne         |$LN4@CAT_IOCont|

; 518  : 					*(BYTE *)pBufOut=0x0;

  00094	e3a03000	 mov         r3, #0

; 519  : 				else

  00098	ea000012	 b           |$LN30@CAT_IOCont|
  0009c		 |$LN10@CAT_IOCont|

; 520  : 					*(BYTE *)pBufOut=0x1;				
; 521  : 			}
; 522  : 			else
; 523  : 			{
; 524  : 				if(!(port_1_status&(1<<(*(UINT8 *)pBufIn-8))))

  0009c	e5de2001	 ldrb        r2, [lr, #1]
  000a0	e2433008	 sub         r3, r3, #8
  000a4	e3a01001	 mov         r1, #1
  000a8	e1a03311	 mov         r3, r1, lsl r3
  000ac	e1120003	 tst         r2, r3

; 525  : 				{
; 526  : 					port_1_status |= (1<<(*(UINT8 *)pBufIn-8));

  000b0	01823003	 orreq       r3, r2, r3
  000b4	020330ff	 andeq       r3, r3, #0xFF

; 527  : 					PortConfig(0x40,CONFIG_PORT_1,port_1_status);

  000b8	01a02003	 moveq       r2, r3
  000bc	03a01007	 moveq       r1, #7
  000c0	03a00040	 moveq       r0, #0x40
  000c4	05ce3001	 streqb      r3, [lr, #1]
  000c8	0b000000	 bleq        |?PortConfig@@YAHEEE@Z|

; 528  : 					//RETAILMSG(1,(TEXT("Config Port %x Input\r\n"),*(BYTE *)pBufIn));
; 529  : 				}
; 530  : 				if(!(PortRead(0x40,INPUT_PORT_1)&(1<<(*(UINT8 *)pBufIn-8))))

  000cc	e3a01001	 mov         r1, #1
  000d0	e3a00040	 mov         r0, #0x40
  000d4	eb000000	 bl          |?PortRead@@YAEEE@Z|
  000d8	e5d53000	 ldrb        r3, [r5]
  000dc	e2433008	 sub         r3, r3, #8

; 531  : 					*(BYTE *)pBufOut=0x0;
; 532  : 				else

  000e0	eaffffe8	 b           |$LN35@CAT_IOCont|
  000e4		 |$LN4@CAT_IOCont|

; 533  : 					*(BYTE *)pBufOut=0x1;

  000e4	e3a03001	 mov         r3, #1
  000e8		 |$LN30@CAT_IOCont|
  000e8	e5c43000	 strb        r3, [r4]

; 534  : 			}
; 535  : 			//RETAILMSG(1,(TEXT("Read Port %x Level%x %x %x %x %x\r\n"),*(BYTE *)pBufIn,*(BYTE*)(pBufOut),port_0_status,port_1_status,write_port_0_status,write_port_1_status));
; 536  : 			if(pdwActualOut) *(int*)pdwActualOut=sizeof(BYTE)*dwLenOut;

  000ec	e59d3018	 ldr         r3, [sp, #0x18]
  000f0	e3530000	 cmp         r3, #0
  000f4	0a000043	 beq         |$LN13@CAT_IOCont|
  000f8	e5836000	 str         r6, [r3]

; 537  : 		}
; 538  : 
; 539  : 		break;

  000fc	ea000041	 b           |$LN13@CAT_IOCont|
  00100		 |$LN25@CAT_IOCont|

; 436  : 	{
; 437  : 	case IOCTL_CAT9555_WRITE:
; 438  : 		//GPIOSetBit(g_gpioH,GPIO_DIR);
; 439  : 		//IOWRITE(*(BYTE*)pBufIn,(*(BYTE*)(pBufOut+1)<<8)|*(BYTE*)(pBufOut));	
; 440  : 		//WriteReg(*(UINT8 *)pBufIn,(BYTE *)pBufOut,dwLenOut);
; 441  : 		//RETAILMSG(1,(TEXT("Driver Write =\r\n")));
; 442  : 		//for(i=0;i<dwLenOut;i++)
; 443  : 		//RETAILMSG(1,(TEXT("Write Port %x Level%x %x %x %x %x\r\n"),*(BYTE *)pBufIn,*(BYTE*)(pBufOut),port_0_status,port_1_status,write_port_0_status,write_port_1_status));
; 444  : 		if(*(UINT8 *)pBufIn<=7 && *(UINT8 *)pBufIn>=0)

  00100	e5d53000	 ldrb        r3, [r5]

; 445  : 		{
; 446  : 			if(port_0_status&(1<<*(UINT8 *)pBufIn))

  00104	e59f4108	 ldr         r4, [pc, #0x108]
  00108	e3530007	 cmp         r3, #7
  0010c	8a00001c	 bhi         |$LN24@CAT_IOCont|
  00110	e3a02001	 mov         r2, #1
  00114	e1a03312	 mov         r3, r2, lsl r3
  00118	e5d42000	 ldrb        r2, [r4]
  0011c	e1120003	 tst         r2, r3

; 447  : 			{
; 448  : 				port_0_status &= ~(1<<*(UINT8 *)pBufIn);

  00120	11c23003	 bicne       r3, r2, r3

; 449  : 				PortConfig(0x40,CONFIG_PORT_0,port_0_status);

  00124	11a02003	 movne       r2, r3
  00128	13a01006	 movne       r1, #6
  0012c	13a00040	 movne       r0, #0x40
  00130	15c43000	 strneb      r3, [r4]
  00134	1b000000	 blne        |?PortConfig@@YAHEEE@Z|

; 450  : 				//RETAILMSG(1,(TEXT("Config Port %x Output\r\n"),*(BYTE *)pBufIn));
; 451  : 			}
; 452  : 			if(*(BYTE *)pBufOut==0x1)

  00138	e59d3010	 ldr         r3, [sp, #0x10]

; 453  : 			{//output 1
; 454  : 				if(!(write_port_0_status&(1<<*(UINT8 *)pBufIn)))

  0013c	e3a01001	 mov         r1, #1
  00140	e5d42002	 ldrb        r2, [r4, #2]
  00144	e5d33000	 ldrb        r3, [r3]
  00148	e3530001	 cmp         r3, #1
  0014c	e5d53000	 ldrb        r3, [r5]
  00150	e1a03311	 mov         r3, r1, lsl r3
  00154	1a000006	 bne         |$LN22@CAT_IOCont|
  00158	e1120003	 tst         r2, r3
  0015c	1a000029	 bne         |$LN13@CAT_IOCont|

; 455  : 				{
; 456  : 					write_port_0_status |= (1<<*(UINT8 *)pBufIn);

  00160	e1823003	 orr         r3, r2, r3
  00164	e20330ff	 and         r3, r3, #0xFF
  00168		 |$LN34@CAT_IOCont|

; 457  : 					PortWrite(0x40,OUTPUT_PORT_0,write_port_0_status);

  00168	e3a01002	 mov         r1, #2
  0016c	e5c43002	 strb        r3, [r4, #2]

; 458  : 					//RETAILMSG(1,(TEXT("Write Port %x Level H\r\n"),*(BYTE *)pBufIn));
; 459  : 				}
; 460  : 			}else

  00170	ea000021	 b           |$LN32@CAT_IOCont|
  00174		 |$LN22@CAT_IOCont|

; 461  : 			{
; 462  : 				if(write_port_0_status&(1<<*(UINT8 *)pBufIn))

  00174	e1120003	 tst         r2, r3
  00178	0a000022	 beq         |$LN13@CAT_IOCont|

; 463  : 				{
; 464  : 					write_port_0_status &= ~(1<<*(UINT8 *)pBufIn);

  0017c	e1c23003	 bic         r3, r2, r3

; 465  : 					PortWrite(0x40,OUTPUT_PORT_0,write_port_0_status);
; 466  : 					//RETAILMSG(1,(TEXT("Write Port %x Level L\r\n"),*(BYTE *)pBufIn));
; 467  : 				}
; 468  : 			}
; 469  : 		}
; 470  : 		else

  00180	eafffff8	 b           |$LN34@CAT_IOCont|
  00184		 |$LN24@CAT_IOCont|

; 471  : 		{
; 472  : 			if(port_1_status&(1<<(*(UINT8 *)pBufIn-8)))

  00184	e5d42001	 ldrb        r2, [r4, #1]
  00188	e2433008	 sub         r3, r3, #8
  0018c	e3a01001	 mov         r1, #1
  00190	e1a03311	 mov         r3, r1, lsl r3
  00194	e1120003	 tst         r2, r3

; 473  : 			{
; 474  : 				port_1_status &= ~(1<<(*(UINT8 *)pBufIn-8));

  00198	11c23003	 bicne       r3, r2, r3

; 475  : 				PortConfig(0x40,CONFIG_PORT_1,port_1_status);

  0019c	11a02003	 movne       r2, r3
  001a0	13a01007	 movne       r1, #7
  001a4	13a00040	 movne       r0, #0x40
  001a8	15c43001	 strneb      r3, [r4, #1]
  001ac	1b000000	 blne        |?PortConfig@@YAHEEE@Z|

; 476  : 				//RETAILMSG(1,(TEXT("Config Port %x Output\r\n"),*(BYTE *)pBufIn));
; 477  : 			}
; 478  : 			if(*(BYTE *)pBufOut==0x1){//output 1

  001b0	e59d3010	 ldr         r3, [sp, #0x10]

; 479  : 				if(!(write_port_1_status&(1<<(*(UINT8 *)pBufIn-8))))

  001b4	e3a01001	 mov         r1, #1
  001b8	e5d42003	 ldrb        r2, [r4, #3]
  001bc	e5d33000	 ldrb        r3, [r3]
  001c0	e3530001	 cmp         r3, #1
  001c4	e5d53000	 ldrb        r3, [r5]
  001c8	e2433008	 sub         r3, r3, #8
  001cc	e1a03311	 mov         r3, r1, lsl r3
  001d0	1a000004	 bne         |$LN16@CAT_IOCont|
  001d4	e1120003	 tst         r2, r3
  001d8	1a00000a	 bne         |$LN13@CAT_IOCont|

; 480  : 				{
; 481  : 					write_port_1_status |= 1<<(*(UINT8 *)pBufIn-8);

  001dc	e1823003	 orr         r3, r2, r3
  001e0	e20330ff	 and         r3, r3, #0xFF

; 482  : 					PortWrite(0x40,OUTPUT_PORT_1,write_port_1_status);
; 483  : 					//RETAILMSG(1,(TEXT("Write Port %x Level H\r\n"),*(BYTE *)pBufIn));
; 484  : 				}
; 485  : 			}else

  001e4	ea000002	 b           |$LN33@CAT_IOCont|
  001e8		 |$LN16@CAT_IOCont|

; 486  : 			{
; 487  : 				if(write_port_1_status&(1<<(*(UINT8 *)pBufIn-8)))

  001e8	e1120003	 tst         r2, r3
  001ec	0a000005	 beq         |$LN13@CAT_IOCont|

; 488  : 				{
; 489  : 					write_port_1_status &= ~(1<<(*(UINT8 *)pBufIn-8));

  001f0	e1c23003	 bic         r3, r2, r3
  001f4		 |$LN33@CAT_IOCont|

; 490  : 					PortWrite(0x40,OUTPUT_PORT_1,write_port_1_status);

  001f4	e5c43003	 strb        r3, [r4, #3]
  001f8	e3a01003	 mov         r1, #3
  001fc		 |$LN32@CAT_IOCont|
  001fc	e1a02003	 mov         r2, r3
  00200	e3a00040	 mov         r0, #0x40
  00204	eb000000	 bl          |?PortWrite@@YAHEEE@Z|
  00208		 |$LN13@CAT_IOCont|

; 540  : 	default:
; 541  : 		break;		
; 542  : 	}
; 543  : 	return TRUE;

  00208	e3a00001	 mov         r0, #1

; 544  : } 

  0020c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00210	e12fff1e	 bx          lr
  00214		 |$LN39@CAT_IOCont|
  00214		 |$LN40@CAT_IOCont|
  00214	00000000	 DCD         |?port_0_status@@3EA|
  00218		 |$LN41@CAT_IOCont|
  00218	00220c84	 DCD         0x220c84
  0021c		 |$M36703|

			 ENDP  ; |?CAT_IOControl@@YAHKKPAEK0KPAK@Z|, CAT_IOControl

	EXPORT	|?CAT_Open@@YAKKKK@Z|			; CAT_Open

  00000			 AREA	 |.pdata|, PDATA
|$T36717| DCD	|$LN5@CAT_Open|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_Open@@YAKKKK@Z| PROC		; CAT_Open

; 549  : {

  00000		 |$LN5@CAT_Open|
  00000		 |$M36714|

; 550  : 	//RETAILMSG(1,(TEXT("USERMUL: CAT_Open\r\n")));
; 551  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 552  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36715|

			 ENDP  ; |?CAT_Open@@YAKKKK@Z|, CAT_Open

	EXPORT	|?CAT_Close@@YAHK@Z|			; CAT_Close

  00000			 AREA	 |.pdata|, PDATA
|$T36726| DCD	|$LN5@CAT_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_Close@@YAHK@Z| PROC		; CAT_Close

; 557  : {

  00000		 |$LN5@CAT_Close|
  00000		 |$M36723|

; 558  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 559  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36724|

			 ENDP  ; |?CAT_Close@@YAHK@Z|, CAT_Close

	EXPORT	|?CAT_PowerDown@@YAXK@Z|		; CAT_PowerDown

  00000			 AREA	 |.pdata|, PDATA
|$T36733| DCD	|$LN5@CAT_PowerD|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_PowerDown@@YAXK@Z| PROC		; CAT_PowerDown

; 564  : {

  00000		 |$LN5@CAT_PowerD|
  00000		 |$M36730|

; 565  : 	//RETAILMSG(1,(TEXT("USERMUL: CAT_PowerDown\r\n")));
; 566  : 	
; 567  : } 

  00000	e12fff1e	 bx          lr
  00004		 |$M36731|

			 ENDP  ; |?CAT_PowerDown@@YAXK@Z|, CAT_PowerDown

	EXPORT	|?CAT_PowerUp@@YAXK@Z|			; CAT_PowerUp

  00000			 AREA	 |.pdata|, PDATA
|$T36740| DCD	|$LN5@CAT_PowerU|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_PowerUp@@YAXK@Z| PROC		; CAT_PowerUp

; 572  : {

  00000		 |$LN5@CAT_PowerU|
  00000		 |$M36737|

; 573  : 	//RETAILMSG(1,(TEXT("USERMUL: CAT_PowerUp\r\n")));
; 574  : 
; 575  : } 

  00000	e12fff1e	 bx          lr
  00004		 |$M36738|

			 ENDP  ; |?CAT_PowerUp@@YAXK@Z|, CAT_PowerUp

	EXPORT	|?CAT_Read@@YAKKPAXK@Z|			; CAT_Read

  00000			 AREA	 |.pdata|, PDATA
|$T36749| DCD	|$LN5@CAT_Read|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_Read@@YAKKPAXK@Z| PROC		; CAT_Read

; 580  : {

  00000		 |$LN5@CAT_Read|
  00000		 |$M36746|

; 581  : 	//RETAILMSG(1,(TEXT("USERMUL: CAT_Read\r\n")));
; 582  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 583  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36747|

			 ENDP  ; |?CAT_Read@@YAKKPAXK@Z|, CAT_Read

	EXPORT	|?CAT_Seek@@YAKKJK@Z|			; CAT_Seek

  00000			 AREA	 |.pdata|, PDATA
|$T36758| DCD	|$LN5@CAT_Seek|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_Seek@@YAKKJK@Z| PROC		; CAT_Seek

; 588  : {

  00000		 |$LN5@CAT_Seek|
  00000		 |$M36755|

; 589  : 	//RETAILMSG(1,(TEXT("USERMUL: CAT_Seek\r\n")));
; 590  : 	return 0;

  00000	e3a00000	 mov         r0, #0

; 591  : } 

  00004	e12fff1e	 bx          lr
  00008		 |$M36756|

			 ENDP  ; |?CAT_Seek@@YAKKJK@Z|, CAT_Seek

	EXPORT	|?CAT_Write@@YAKKPBXK@Z|		; CAT_Write

  00000			 AREA	 |.pdata|, PDATA
|$T36767| DCD	|$LN5@CAT_Write|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CAT_Write@@YAKKPBXK@Z| PROC		; CAT_Write

; 596  : {

  00000		 |$LN5@CAT_Write|
  00000		 |$M36764|

; 597  : 	//RETAILMSG(1,(TEXT("USERMUL: CAT_Write\r\n")));
; 598  : 	return 0;

  00000	e3a00000	 mov         r0, #0

; 599  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36765|

			 ENDP  ; |?CAT_Write@@YAKKPBXK@Z|, CAT_Write

	END
